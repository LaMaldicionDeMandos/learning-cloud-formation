AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPCtest:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC Test

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCtest
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet test

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway test

  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPCtest

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCtest
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Pravate Subnet test

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCtest
      Tags:
        - Key: Name
          Value: Route Table test

  RoutePublicTest:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet

  PrincipalSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "sg_primary"
      VpcId: !Ref VPCtest
      GroupDescription: Security Group Principal
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Security Group Principal

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "sg_database"
      VpcId: !Ref VPCtest
      GroupDescription: Security Group PAra la base de datos
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: "PrincipalSecurityGroup"
      Tags:
        - Key: Name
          Value: Security Group Database

  EC2MasterTest:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-6869aa05
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: "0"
          SubnetId:
            Ref: PublicSubnet
          GroupSet:
          - "Ref": "PrincipalSecurityGroup"
      Tags:
        - Key: Name
          Value: Master Test
      UserData: {"Fn::Base64" : {"Fn::Join" : ["", ["#!/bin/bash -ex\n",
          "yum -y update\n",
          "yum -y install httpd php mysql php-mysql\n",
          "chkconfig httpd on\n",
          "service httpd start\n",
          "cd /var/www/html\n",
          "wget https://s3-us-west-2.amazonaws.com/us-west-2-aws-training/awsu-spl/spl-13/scripts/app.tgz\n",
          "tar xvfz app.tgz\n",
          "chown apache:root /var/www/html/rds.conf.php"]]}}

Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: EC2MasterTest
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value:
      'Fn::GetAtt':
        - EC2MasterTest
        - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value:
      'Fn::GetAtt':
        - EC2MasterTest
        - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value:
      'Fn::GetAtt':
        - EC2MasterTest
        - PublicIp